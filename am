package aemapi;

import static aemapi.Constants.OAUTH;

import com.google.gson.Gson;
import com.google.gson.JsonObject;
import java.io.IOException;
import java.net.URI;
import java.nio.charset.StandardCharsets;
import org.apache.commons.codec.binary.Base64;
import org.apache.http.HttpHeaders;
import org.apache.http.HttpResponse;
import org.apache.http.StatusLine;
import org.apache.http.client.HttpResponseException;
import org.apache.http.client.config.CookieSpecs;
import org.apache.http.client.config.RequestConfig;
import org.apache.http.client.fluent.Executor;
import org.apache.http.client.fluent.Request;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;

public class AemAccess {

  private static String AEM_ENDPOINT = "";
  public static final String QUERY_BUILDER_ENDPOINT = AEM_ENDPOINT + "/bin/querybuilder.json";
  private static final Executor executor = Executor.newInstance(HttpClients.custom()
      .setDefaultRequestConfig(
          RequestConfig.custom().setCookieSpec(CookieSpecs.STANDARD).build())
      .build());

  public static void setAemEndpoint(String aemEndpoint) {
    AEM_ENDPOINT = aemEndpoint;
  }

  public static String getAemEndpoint() {
    return AEM_ENDPOINT;
  }

  protected static JsonObject getToJsonObject(String uri) throws IOException {
    return toJsonObject(requestGet(uri));
  }

  protected static JsonObject getToJsonObject(URI uri) throws IOException {
    return toJsonObject(requestGet(uri));
  }

  private static HttpResponse requestGet(String uri) throws IOException {
    return sendRequest(Request.Get(uri));
  }

  private static HttpResponse requestGet(URI uri) throws IOException {
    return sendRequest(Request.Get(uri));
  }

  private static JsonObject toJsonObject(HttpResponse response)
      throws IOException {
    JsonObject json = new Gson().fromJson(toString(response),
        JsonObject.class);
    if (AemClient.isDebugEnabled()) {
      System.out.println("Json> " + json.toString());
    }
    if (checkError(json)) {
      return null;
    }
    return json;
  }

  private static boolean checkError(JsonObject json) {
    if (json.get("error") == null) {
      return false;
    }
    String errorCode = (json.get("error_code") != null)
        ? json.get("error_code").getAsString()
        : "";
    String error = (json.get("error") != null)
        ? json.get("error").getAsString()
        : "";
    String errorDescription = (json.get("error_description") != null)
        ? json.get("error_description").getAsString()
        : "";
    System.out.println(
        "Error> " + errorCode + " " + error + " (" + errorDescription + ")");
    return true;
  }

  private static HttpResponse sendRequest(Request req) throws IOException {
    String token;
    String userName;
    String password;
    if (AemClient.isDebugEnabled()) {
      System.out.println(System.lineSeparator() + "Request> " + req.toString());
    }
    if (AemClient.getAuthType().equals(OAUTH)) {
      token = AemClient.getBearerToken();
      req.addHeader(HttpHeaders.AUTHORIZATION, token);
    } else {
      userName = AemClient.getUserName();
      password = AemClient.getPassword();
      String credentials = userName + ":" + password;
      byte[] encodedBytes = Base64.encodeBase64(credentials.getBytes(StandardCharsets.UTF_8));
      String s = new String(encodedBytes, StandardCharsets.UTF_8);
      req.addHeader(HttpHeaders.AUTHORIZATION, "Basic " + s);
    }
    HttpResponse response = executor.execute(req).returnResponse();
    if (AemClient.isDebugEnabled()) {
      System.out.println("Response> " + response.getStatusLine().toString()
          + " " + response.getEntity().toString());
    }
    handleErrorResponse(response);
    return response;
  }

  private static void handleErrorResponse(HttpResponse response)
      throws HttpResponseException {
    StatusLine statusLine = response.getStatusLine();
    if (statusLine.getStatusCode() != 200) {
      throw new HttpResponseException(statusLine.getStatusCode(),
          statusLine.getReasonPhrase());
    }
  }

  private static String toString(HttpResponse response) throws IOException {
    return EntityUtils.toString(response.getEntity());
  }
}
